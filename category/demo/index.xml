<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Demo | Academic</title>
    <link>https://example.com/category/demo/</link>
      <atom:link href="https://example.com/category/demo/index.xml" rel="self" type="application/rss+xml" />
    <description>Demo</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 12 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Demo</title>
      <link>https://example.com/category/demo/</link>
    </image>
    
    <item>
      <title>Markdown</title>
      <link>https://example.com/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1/</guid>
      <description>&lt;h2 id=&#34;markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Markdown&lt;/em&gt; is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files.&lt;/p&gt;
&lt;p&gt;The initial description of Markdown contained ambiguities and raised unanswered questions, causing implementations to both intentionally and accidentally diverge from the original version. This was addressed in 2014, when long-standing Markdown contributors released CommonMark, an unambiguous specification and test suite for Markdown.&lt;/p&gt;
&lt;h2 id=&#34;history&#34;&gt;&lt;strong&gt;History&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;n 2002 Aaron Swartz created atx, &amp;ldquo;the true structured text format&amp;rdquo;. Swartz and Gruber then worked together to create the Markdown language in 2004, with the goal of enabling people &amp;ldquo;to write using an easy-to-read and easy-to-write plain text format, optionally convert it to structurally valid XHTML (or HTML)&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Its key design goal was readability, that the language be readable as-is, without looking like it has been marked up with tags or formatting instructions, unlike text formatted with a markup language, such as Rich Text Format (RTF) or HTML, which have obvious tags and formatting instructions. To this end, its main inspiration is the existing conventions for marking up plain text in email, though it also draws from earlier markup languages, notably setext, Textile, and reStructuredText.&lt;/p&gt;
&lt;p&gt;Gruber wrote a Perl script, Markdown.pl, which converts marked-up text input to valid, well-formed XHTML or HTML and replaces angle brackets (&amp;lt;, &amp;gt;) and ampersands (&amp;amp;) with their corresponding character entity references. It can take the role of a standalone script, a plugin for Blosxom or a Movable Type, or of a text filter for BBEdit.&lt;/p&gt;
&lt;h2 id=&#34;rise-and-divergence&#34;&gt;&lt;strong&gt;Rise and divergence&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;As Markdown&amp;rsquo;s popularity grew rapidly, many Markdown implementations appeared, driven mostly by the need for additional features such as tables, footnotes, definition lists, and Markdown inside HTML blocks.&lt;/p&gt;
&lt;p&gt;The behavior of some of these diverged from the reference implementation, as Markdown was only characterised by an informal specification and a Perl implementation for conversion to HTML.&lt;/p&gt;
&lt;p&gt;At the same time, a number of ambiguities in the informal specification had attracted attention. These issues spurred the creation of tools such as Babelmark to compare the output of various implementations, and an effort by some developers of Markdown parsers for standardisation. However, Gruber has argued that complete standardization would be a mistake: &amp;ldquo;Different sites (and people) have different needs. No one syntax would make all happy.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;standardization&#34;&gt;&lt;strong&gt;Standardization&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;From 2012, a group of people, including Jeff Atwood and John MacFarlane, launched what Atwood characterised as a standardisation effort. A community website now aims to &amp;ldquo;document various tools and resources available to document authors and developers, as well as implementors of the various Markdown implementations&amp;rdquo;. In September 2014, Gruber objected to the usage of &amp;ldquo;Markdown&amp;rdquo; in the name of this effort and it was rebranded as CommonMark. CommonMark.org published several versions of a specification, reference implementation, test suite, and &amp;quot; to announce a finalized 1.0 spec and test suite in 2019.&amp;quot; No 1.0 spec has since been released as major issues still remain unsolved. Nonetheless, the following sites and projects have adopted CommonMark: Discourse, GitHub, GitLab, Reddit, Qt, Stack Exchange (Stack Overflow), and Swift.&lt;/p&gt;
&lt;p&gt;In March 2016 two relevant informational Internet RFCs were published:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RFC 7763 introduced MIME type &lt;em&gt;&lt;strong&gt;text/markdown.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RFC 7764 discussed and registered the variants MultiMarkdown, GitHub Flavored Markdown (GFM), Pandoc, and Markdown Extra among others.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;implementations&#34;&gt;&lt;strong&gt;Implementations&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Implementations of Markdown are available for over a dozen programming languages; in addition, many platforms and frameworks support Markdown. For example, Markdown plugins exist for every major blogging platform.&lt;/p&gt;
&lt;p&gt;While Markdown is a minimal markup language and is read and edited with a normal text editor, there are specially designed editors that preview the files with styles, which are available for all major platforms. Many general purpose text and code editors have syntax highlighting plugins for Markdown built into them or available as optional download. Editors may feature a side-by-side preview window or render the code directly in a WYSIWYG fashion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;JotterPad&lt;/em&gt; – an online WYSIWYG editor that supports Markdown and fountain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Doxygen&lt;/em&gt; – a source code documentation generator which supports Markdown with extra features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;RStudio&lt;/em&gt; – an IDE for R. It provides a C++ wrapper function for a markdown variant called sundown.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Flavored Markdown (GFM) ignores underscores in words, and adds syntax highlighting, task lists, and tables RMarkdown.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Nextcloud Notes&lt;/em&gt; - the default app for taking notes on the Nextcloud platform supports formatting using Markdown.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My week 2.05.2022 - 8.05.2022</title>
      <link>https://example.com/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</guid>
      <description>&lt;h2 id=&#34;my-week&#34;&gt;&lt;strong&gt;My week&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;This week I went home, rested with my family. In my free time, I was engaged in self-development, as I did laboratory work in advance. I have read Unix literature. Had a lot of fun with my best friends.&lt;/p&gt;
&lt;p&gt;I think this week has passed by 100%. I had a very good rest.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;1&#34; srcset=&#34;
               /post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu82fe5bf69b402c4322cc549e8ac8fbc2_27060_0f05c4d3ed0fce551ff318cfde2c3d0d.webp 400w,
               /post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu82fe5bf69b402c4322cc549e8ac8fbc2_27060_1b87acab4ec3ee7d374137f5f68980fa.webp 760w,
               /post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu82fe5bf69b402c4322cc549e8ac8fbc2_27060_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://example.com/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu82fe5bf69b402c4322cc549e8ac8fbc2_27060_0f05c4d3ed0fce551ff318cfde2c3d0d.webp&#34;
               width=&#34;600&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://example.com/post/getting-started/</link>
      <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;git&#34;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Git is a software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).&lt;/p&gt;
&lt;h2 id=&#34;history&#34;&gt;&lt;strong&gt;History&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Git development began in April 2005, after many developers of the Linux kernel gave up access to BitKeeper, a proprietary source-control management (SCM) system that they had been using to maintain the project since 2002. The copyright holder of BitKeeper, Larry McVoy, had withdrawn free use of the product after claiming that Andrew Tridgell had created SourcePuller by reverse engineering the BitKeeper protocols. The same incident also spurred the creation of another version-control system, Mercurial.&lt;/p&gt;
&lt;p&gt;Linus Torvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs.  Torvalds cited an example of a source-control management system needing 30 seconds to apply a patch and update all associated metadata, and noted that this would not scale to the needs of Linux kernel development, where synchronizing with fellow maintainers could require 250 such actions at once. For his design criterion, he specified that patching should take no more than three seconds, and added three more goals:&lt;/p&gt;
&lt;p&gt;Take Concurrent Versions System (CVS) as an example of what not to do; if in doubt, make the exact opposite decision.
Support a distributed, BitKeeper-like workflow.
Include very strong safeguards against corruption, either accidental or malicious.
These criteria eliminated every version-control system in use at the time, so immediately after the 2.6.12-rc2 Linux kernel development release, Torvalds set out to write his own.&lt;/p&gt;
&lt;p&gt;The development of Git began on 3 April 2005. Torvalds announced the project on 6 April and became self-hosting the next day. The first merge of multiple branches took place on 18 April. Torvalds achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches to the Linux kernel tree at the rate of 6.7 patches per second. On 16 June, Git managed the kernel 2.6.12 release.&lt;/p&gt;
&lt;p&gt;Torvalds turned over maintenance on 26 July 2005 to Junio Hamano, a major contributor to the project. Hamano was responsible for the 1.0 release on 21 December 2005 and remains the project&amp;rsquo;s core maintainer.&lt;/p&gt;
&lt;h2 id=&#34;design&#34;&gt;&lt;strong&gt;Design&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Git&amp;rsquo;s design was inspired by BitKeeper and Monotone. Git was originally designed as a low-level version-control system engine, on top of which others could write front ends, such as Cogito or StGIT. The core Git project has since become a complete version-control system that is usable directly. While strongly influenced by BitKeeper, Torvalds deliberately avoided conventional approaches, leading to a unique design.&lt;/p&gt;
&lt;h2 id=&#34;implementations&#34;&gt;&lt;strong&gt;Implementations&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Git (the main implementation in C) is primarily developed on Linux, although it also supports most major operating systems, including the BSDs (DragonFly BSD, FreeBSD, NetBSD, and OpenBSD), Solaris, macOS, and Windows.&lt;/p&gt;
&lt;p&gt;The first Windows port of Git was primarily a Linux-emulation framework that hosts the Linux version. Installing Git under Windows creates a similarly named Program Files directory containing the Mingw-w64 port of the GNU Compiler Collection, Perl 5, MSYS2 (itself a fork of Cygwin, a Unix-like emulation environment for Windows) and various other Windows ports or emulations of Linux utilities and libraries. Currently, native Windows builds of Git are distributed as 32- and 64-bit installers. The git official website currently maintains a build of Git for Windows, still using the MSYS2 environment.&lt;/p&gt;
&lt;p&gt;The JGit implementation of Git is a pure Java software library, designed to be embedded in any Java application. JGit is used in the Gerrit code-review tool, and in EGit, a Git client for the Eclipse IDE.&lt;/p&gt;
&lt;p&gt;Go-git is an open-source implementation of Git written in pure Go. It is currently used for backing projects as a SQL interface for Git code repositories and providing encryption for Git.&lt;/p&gt;
&lt;p&gt;The Dulwich implementation of Git is a pure Python software component for Python 2.7, 3.4 and 3.5.&lt;/p&gt;
&lt;p&gt;The libgit2 implementation of Git is an ANSI C software library with no other dependencies, which can be built on multiple platforms, including Windows, Linux, macOS, and BSD. It has bindings for many programming languages, including Ruby, Python, and Haskell.&lt;/p&gt;
&lt;p&gt;JS-Git is a JavaScript implementation of a subset of Git.&lt;/p&gt;
&lt;h2 id=&#34;security&#34;&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Git does not provide access-control mechanisms, but was designed for operation with other tools that specialize in access control.&lt;/p&gt;
&lt;p&gt;On 17 December 2014, an exploit was found affecting the Windows and macOS versions of the Git client. An attacker could perform arbitrary code execution on a target computer with Git installed by creating a malicious Git tree (directory) named .git (a directory in Git repositories that stores all the data of the repository) in a different case (such as .GIT or .Git, needed because Git does not allow the all-lowercase version of .git to be created manually) with malicious files in the .git/hooks subdirectory (a folder with executable files that Git runs) on a repository that the attacker made or on a repository that the attacker can modify. If a Windows or Mac user pulls (downloads) a version of the repository with the malicious directory, then switches to that directory, the .git directory will be overwritten (due to the case-insensitive trait of the Windows and Mac filesystems) and the malicious executable files in .git/hooks may be run, which results in the attacker&amp;rsquo;s commands being executed. An attacker could also modify the .git/config configuration file, which allows the attacker to create malicious Git aliases (aliases for Git commands or external commands) or modify extant aliases to execute malicious commands when run. The vulnerability was patched in version 2.2.1 of Git, released on 17 December 2014, and announced the next day.&lt;/p&gt;
&lt;p&gt;Git version 2.6.1, released on 29 September 2015, contained a patch for a security vulnerability (CVE-2015-7545) that allowed arbitrary code execution. The vulnerability was exploitable if an attacker could convince a victim to clone a specific URL, as the arbitrary commands were embedded in the URL itself. An attacker could use the exploit via a man-in-the-middle attack if the connection was unencrypted, as they could redirect the user to a URL of their choice. Recursive clones were also vulnerable, since they allowed the controller of a repository to specify arbitrary URLs via the gitmodules file.&lt;/p&gt;
&lt;p&gt;Git uses SHA-1 hashes internally. Linus Torvalds has responded that the hash was mostly to guard against accidental corruption, and the security a cryptographically secure hash gives was just an accidental side effect, with the main security being signing elsewhere. Since a demonstration of the SHAttered attack against git in 2017, git was modified to use a SHA-1 variant resistant to this attack. A plan for hash function transition is being written since February 2020.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
