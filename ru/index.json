[{"authors":null,"categories":null,"content":"Легиньких Галина — студентка РУДН. Ей очень нравится заниматься волонтерством, решать задачи по математике и физике. Окончила школу вожатых. В свободное время читает иностранную литературу.\n  Скачать мое резюме.\n","date":1653868800,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1653868800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Легиньких Галина — студентка РУДН. Ей очень нравится заниматься волонтерством, решать задачи по математике и физике. Окончила школу вожатых. В свободное время читает иностранную литературу.\n  Скачать мое резюме.","tags":null,"title":"Галина Легиньких","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://galeginkikh.github.io/ru/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Галина Легиньких"],"categories":["Demo"],"content":"На этой неделе выполнила лабораторные №11, 12, 13 и Индивидуальный проект этап 5.\nЛабораторная работа №11 Изучила основы программирования в оболочке ОС UNIX. Научилась писать более сложные командные файлы с использованием логических управляющих конструкций и циклов.\nЛабораторная работа №13. Приобрела простейшие навыки разработки, анализа, тестирования и отладки приложений в ОС типа UNIX/Linux на примере создания на языке программирования С калькулятора с простейшими функциями.\nИндивидуальны проект. Этап 5. Я сделала заметки по проекту. Написала пост по языкам научного программирования\n","date":1653868800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653868800,"objectID":"47129a5f7fd4c4367464cd408238997e","permalink":"https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","publishdate":"2022-05-30T00:00:00Z","relpermalink":"/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","section":"post","summary":"На этой неделе выполнила лабораторные №11, 12, 13 и Индивидуальный проект этап 5.","tags":["Academic"],"title":"Моя неделя 23.05.2022 - 29.05.2022 (Этап 6)","type":"post"},{"authors":["Галина Легиньких"],"categories":["Demo"],"content":"Python — высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью, ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ. Язык является полностью объектно-ориентированным в том плане, что всё является объектами. Необычной особенностью языка является выделение блоков кода пробельными отступами. Синтаксис ядра языка минималистичен, за счёт чего на практике редко возникает необходимость обращаться к документации. Сам же язык известен как интерпретируемый и используется в том числе для написания скриптов. Недостатками языка являются зачастую более низкая скорость работы и более высокое потребление памяти написанных на нём программ по сравнению с аналогичным кодом, написанным на компилируемых языках, таких как C или C++.\nPython является мультипарадигмальным языком программирования, поддерживающим императивное, процедурное, структурное, объектно-ориентированное программирование, метапрограммирование и функциональное программирование. Задачи обобщённого программирования решаются за счёт динамической типизации. Аспектно-ориентированное программирование частично поддерживается через декораторы, более полноценная поддержка обеспечивается дополнительными фреймворками. Такие методики как контрактное и логическое программирование можно реализовать с помощью библиотек или расширений. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений с глобальной блокировкой интерпретатора (GIL), высокоуровневые структуры данных. Поддерживается разбиение программ на модули, которые, в свою очередь, могут объединяться в пакеты.\nЭталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ и являющийся стандартом де-факто языка. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. CPython компилирует исходные тексты в высокоуровневый байт-код, который исполняется в стековой виртуальной машине. К другим трём основным реализациям языка относятся Jython (для JVM), IronPython (для CLR/.NET) и PyPy. PyPy написан на подмножестве языка Python (RPython) и разрабатывался как альтернатива CPython с целью повышения скорости исполнения программ, в том числе за счёт использования JIT-компиляции. Поддержка версии Python 2 закончилась в 2020 году. На текущий момент активно развивается версия языка Python 3. Разработка языка ведётся через предложения по расширению языка PEP (англ. Python Enhancement Proposal), в которых описываются нововведения, делаются корректировки согласно обратной связи от сообщества и документируются итоговые решения.\nСтандартная библиотека включает большой набор полезных переносимых функций, начиная с возможностей для работы с текстом и заканчивая средствами для написания сетевых приложений. Дополнительные возможности, такие как математическое моделирование, работа с оборудованием, написание веб-приложений или разработка игр, могут реализовываться посредством обширного количества сторонних библиотек, а также интеграцией библиотек, написанных на Си или C++, при этом и сам интерпретатор Python может интегрироваться в проекты, написанные на этих языках. Существует и специализированный репозиторий программного обеспечения, написанного на Python, — PyPI. Данный репозиторий предоставляет средства для простой установки пакетов в операционную систему и стал стандартом де-факто для Python. По состоянию на 2019 год в нём содержалось более 175 тысяч пакетов.\nPython стал одним из самых популярных языков, он используется в анализе данных, машинном обучении, DevOps и веб-разработке, а также в других сферах, включая разработку игр. За счёт читабельности, простого синтаксиса и отсутствия необходимости в компиляции язык хорошо подходит для обучения программированию, позволяя концентрироваться на изучении алгоритмов, концептов и парадигм. Отладка же и экспериментирование в значительной степени облегчаются тем фактом, что язык является интерпретируемым. Применяется язык многими крупными компаниями, такими как Google или Facebook. По состоянию на октябрь 2021 года Python занимает первое место в рейтинге TIOBE популярности языков программирования с показателем 11,27%. «Языком года» по версии TIOBE Python объявлялся в 2007, 2010, 2018 и 2020 годах.\nИстория Задумка по реализации языка появилась в конце 1980-х годов, а разработка его реализации началась в 1989 году сотрудником голландского института CWI Гвидо ван Россумом. Для распределённой операционной системы Amoeba требовался расширяемый скриптовый язык, и Гвидо начал разрабатывать Python на досуге, позаимствовав некоторые наработки для языка ABC (Гвидо участвовал в разработке этого языка, ориентированного на обучение программированию). В …","date":1653436800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653436800,"objectID":"806282ca297ddcf450ce11bf4c99def9","permalink":"https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","publishdate":"2022-05-25T00:00:00Z","relpermalink":"/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","section":"post","summary":"Python — высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью, ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ.","tags":["Academic"],"title":"Python","type":"post"},{"authors":null,"categories":null,"content":"Трекеры привычек постоянно появляются в подобных статьях. Чаще всего упоминаются только приложения для составления списка дел или мессенджеры. По традиции они должны присутствовать во всех подобных коллекциях. Итак, убедитесь, что они не перечислены в моей статье, и вы даже можете перепроверить.\nВ геймифицированном трекере привычек вы можете сделать неожиданный поворот, добавив следующие функции:\n бонусы и достижения (достижения) для тех, кто прошел трекер; появление новых функций по мере использования приложения; конкуренция среди пользователей, которые хотят делать X (например, читать 20 страниц в день); квесты, в которых пользователи должны следовать заданному процессу формирования привычек.  Наше приложение должно иметь набор инструментов для дальнейшей мотивации пользователей к выработке хорошей привычки. Это именно то, что будет отличать ваше приложение от большинства других трекеров.\nНавыки серверного программирования: ⭐ ⭐ ⭐\nНавыки фронтального программирования: ⭐ ⭐ ⭐ ⭐\nОперативные навыки (администрирование): ⭐ ⭐\nСложность: 💣 💣 💣\nПрибыль: 💳 💳 💳\n","date":1653436800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653436800,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://galeginkikh.github.io/ru/project/example/","publishdate":"2022-05-25T00:00:00Z","relpermalink":"/ru/project/example/","section":"project","summary":"Трекеры привычек постоянно появляются в подобных статьях. Чаще всего упоминаются только приложения для составления списка дел или мессенджеры.","tags":["Deep Learning"],"title":"Геймифицированный трекер привычек","type":"project"},{"authors":["Галина Легиньких"],"categories":["Demo"],"content":"Моя неделя  Я заранее сделала много лабораторных:\n Научилась работать в редакторе emacs. Изучала основы программирования в оболочке ОС UNIX/Linux. Научилась писать небольшие пакетные файлы. Научилась писать более сложные пакетные файлы, используя логические структуры управления и циклы.     Также написала статью на тему “Топология сети”. Это довольно интересная тема для изучения.\n   ","date":1653436800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653436800,"objectID":"1f9fc6947ec268a7a09b37fcdf278e19","permalink":"https://galeginkikh.github.io/ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","publishdate":"2022-05-25T00:00:00Z","relpermalink":"/ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","section":"post","summary":"Моя неделя  Я заранее сделала много лабораторных:\n Научилась работать в редакторе emacs. Изучала основы программирования в оболочке ОС UNIX/Linux. Научилась писать небольшие пакетные файлы. Научилась писать более сложные пакетные файлы, используя логические структуры управления и циклы.","tags":["Academic"],"title":"Моя неделя 16.05.2022 - 22.05.2022 (Этап 5)","type":"post"},{"authors":["Галина Легиньких"],"categories":["Demo"],"content":"Моя неделя 09.05.2022 - 15.05.2022  Эта неделя началась с праздника. Это День Победы. В этот день у меня была довольно насыщенная программа. Именно в этот день я вернулся в Москву после отпуска. Вечером 9 мая был праздничный солют.\n   Затем, после недели отдыха, я приступила к работе. Необходимо было завершить и сдать все долги. Я заранее сделала еще две лабораторные работы по ОС. В операционной системе я научилась работать с двумя редакторами vi и emacs.\n   Я также много времени уделяла французскому языку.\n   Эта неделя была довольно продуктивной.\n","date":1652400000,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652400000,"objectID":"3897ba3110858b1ae10b1e16efbd41e2","permalink":"https://galeginkikh.github.io/ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","publishdate":"2022-05-13T00:00:00Z","relpermalink":"/ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","section":"post","summary":"Эта неделя началась с праздника.","tags":["Academic"],"title":"Моя неделя 09.05.2022 - 15.05.2022 (Этап 4)","type":"post"},{"authors":["Галина Легиньких"],"categories":["Demo"],"content":"Отчет в markdown  Отчет:\n Титульный лист Содержание Цель Теоретическое введение Выполнение работы Заключение  Markdown - это облегченный язык разметки, который является инструментом для преобразования кода в HTML.\nГлавной особенностью этого языка является простейший синтаксис, который служит для упрощения написания и чтения кода разметки, что, в свою очередь, облегчает его исправление.\nТеперь давайте подробнее рассмотрим функции языка разметки Markdown.\n Блочные элементы    Параграфы и разрывы строк;\n  Заголовки;\n  Цитаты;\n  Списки;\n  Блоки кода;\n  Горизонтальные (разделительные) линии.\n  Строчные элементы    Ссылки;\n  Выделение текста;\n  Кодовые фрагменты строк;\n  Изображения.\n  ОПИСАНИЕ СИНТАКСИСА Параграфы и разрывы строк Для того, чтобы создать параграф с использованием синтаксиса языка Markdown, достаточно отделить строки текста одной (или более) пустой строкой (пустой считается всякая строка, которая не содержит в себе ничего, кроме пробелов и символов табуляции).\nДля того, чтобы вставить видимый перенос строки (элемент \u0026lt;br/\u0026gt;) необходимо окончить строку двумя пробелами и нажатием клавиши «Enter».\nМногие элементы синтаксиса Markdown выглядят и работают гораздо лучше в случае, когда их форматируют с помощью «жесткого перевода строк» (разделение строк, осуществленное самим пользователем, а не программой автоматически). К таким элементам относятся цитаты, списки и пр.\nЗаголовки Язык разметки Markdown поддерживает 2 стиля обозначения заголовков: подчеркивание и выделение символом («#»).\nВыделение заголовков с помощью подчеркивания производится знаками равенства («=») в случае, если заголовок первого уровня, и дефисами («-») в случае, если заголовок второго уровня. Количество знаков подчеркивания не ограничивается.\nПри выделении заголовков с помощью символа («#») используется от одного до шести данных символов, которые устанавливаются в начале строки (перед заголовком). В данном случае количество символов соответствует уровню заголовка. Кроме того, заголовок возможно снабдить закрывающимися символами («#»), хотя это и не является обязательным. Количество закрывающихся символов не обязано соответствовать количеству начальных символов. Уровень заголовка определяется по количеству начальных символов.\nЗаголовки первого и второго уровней, выполненные с помощью подчеркивания, выглядят следующим образом:\nЗаголовок первого уровня ======================== Заголовок второго уровня -------------------------  Заголовки первого, третьего и шестого уровней, выполненные с помощью символа («#»), выглядят следующим образом:\n# Заголовок первого уровня ### Заголовок третьего уровня ###### Заголовок шестого уровня  Приведенные выше заголовки, выполненные с помощью символа («#») тождественны следующим:\n# Заголовок первого уровня # ### Заголовок третьего уровня ### ###### Заголовок шестого уровня ######  В результате на экран выводится следующее:\nЗаголовок первого уровня Заголовок второго уровня Заголовок первого уровня Заголовок третьего уровня Заголовок шестого уровня Цитаты Для обозначения цитат в языке Markdown используется знак «больше» («\u0026gt;»). Его можно вставлять как перед каждой строкой цитаты, так и только перед первой строкой параграфа.\nТакже синтаксис Markdown позволяет создавать вложенные цитаты (цитаты внутри цитат). Для их разметки используются дополнительные уровни знаков цитирования («\u0026gt;»).\nЦитаты в Markdown могут содержать всевозможные элементы разметки. Цитаты в языке Markdown выглядят следующим образом:\n\u0026gt;Это пример цитаты, \u0026gt;в которой перед каждой строкой \u0026gt;ставится угловая скобка. \u0026gt;Это пример цитаты, в которой угловая скобка ставится только перед началом нового параграфа. \u0026gt;Второй параграф.  Вложение цитаты в цитату выглядит следующим образом:\n\u0026gt; Первый уровень цитирования \u0026gt;\u0026gt; Второй уровень цитирования \u0026gt;\u0026gt;\u0026gt; Третий уровень цитирования \u0026gt; \u0026gt;Первый уровень цитирования  В результате на экран выводится следующее:\n Это пример цитаты, в которой перед каждой строкой ставится угловая скобка.\n  Это пример цитаты, в которой угловая скобка ставится только перед началом нового параграфа.\n  Второй параграф.\n Вложенная цитата:\n Первый уровень цитирования\n Второй уровень цитирования\n Третий уровень цитирования\n  Первый уровень цитирования\n Уровень цитирования не может превышать 15-й.\nСписки Markdown поддерживает упорядоченные (нумерованные) и неупорядоченные (ненумерованные) списки.\nДля формирования неупорядоченный списков используются такие маркеры, как звездочки, плюсы и дефисы. Все перечисленные маркеры могут использоваться взаимозаменяемо.\nДля формирования упорядоченных списков в качестве маркеров используются числа с точкой. Важной особенностью в данном случае является то, что сами номера, с помощью которых формируется список, не важны, так как они не оказывают влияния на выходной HTML код. Как бы ни нумеровал пользователь список, на выходе он в любом случае будет иметь упорядоченный список, начинающийся с единицы (1, 2, 3…). Эту особенность стоит учитывать в том случае, когда необходимо использовать порядковые номера элементов в …","date":1652400000,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652400000,"objectID":"28604f3bf16cf53ef3b3b2db69e92fd3","permalink":"https://galeginkikh.github.io/ru/post/getting-started-3-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","publishdate":"2022-05-13T00:00:00Z","relpermalink":"/ru/post/getting-started-3-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","section":"post","summary":"Markdown - это облегченный язык разметки, который является инструментом для преобразования кода в HTML.","tags":["Academic"],"title":"Отчет в markdown","type":"post"},{"authors":["Галина Легиньких"],"categories":["Demo"],"content":"Markdown  Markdown — это облегченный язык разметки для создания форматированного текста с помощью текстового редактора. Джон Грубер и Аарон Шварц создали Markdown в 2004 году как язык разметки, привлекательный для читателей в форме исходного кода. Markdown широко используется в блогах, мгновенных сообщениях, онлайн-форумах, программном обеспечении для совместной работы, страницах документации и файлах readme.\nПервоначальное описание Markdown содержало неясности и вызывало вопросы без ответов, в результате чего реализации как намеренно, так и случайно отличались от исходной версии. Это было решено в 2014 году, когда давние участники Markdown выпустили CommonMark, недвусмысленную спецификацию и набор тестов для Markdown.\nИстория  В 2002 году Аарон Шварц создал atx, «настоящий структурированный текстовый формат». Затем Шварц и Грубер вместе работали над созданием языка Markdown в 2004 году с целью дать людям возможность «писать, используя удобный для чтения и написания простой текстовый формат, при необходимости конвертировать его в структурно допустимый XHTML (или HTML). )».\nКлючевой целью его разработки была удобочитаемость, чтобы язык читался как есть, не выглядя так, как будто он был размечен тегами или инструкциями по форматированию, в отличие от текста, отформатированного с помощью языка разметки, такого как Rich Text Format (RTF) или HTML, который иметь очевидные теги и инструкции по форматированию. С этой целью его основным источником вдохновения являются существующие соглашения для разметки простого текста в электронной почте, хотя он также опирается на более ранние языки разметки, в частности, setext, Textile и reStructuredText.\nГрубер написал Perl-скрипт Markdown.pl, который преобразует размеченный вводимый текст в допустимый, правильно сформированный XHTML или HTML и заменяет угловые скобки (\u0026lt;, \u0026gt;) и амперсанды (\u0026amp;) соответствующими ссылками на символьные сущности. Он может выполнять роль автономного скрипта, плагина для Blosxom или Movable Type или текстового фильтра для BBEdit.\nРост и расхождение  Поскольку популярность Markdown быстро росла, появилось множество реализаций Markdown, в основном из-за необходимости дополнительных функций, таких как таблицы, сноски, списки определений и Markdown внутри блоков HTML.\nПоведение некоторых из них отличалось от эталонной реализации, поскольку Markdown характеризовался только неформальной спецификацией и реализацией Perl для преобразования в HTML.\nВ то же время внимание привлек ряд неясностей в неофициальной спецификации. Эти проблемы стимулировали создание таких инструментов, как Babelmark, для сравнения результатов различных реализаций, а также усилия некоторых разработчиков парсеров Markdown по стандартизации. Однако Грубер утверждал, что полная стандартизация была бы ошибкой: «Разные сайты (и люди) имеют разные потребности. Ни один синтаксис не сделает всех счастливыми».\nСтандартизация  С 2012 года группа людей, включая Джеффа Этвуда и Джона Макфарлейна, запустила то, что Этвуд охарактеризовал как усилия по стандартизации. Веб-сайт сообщества теперь направлен на «документирование различных инструментов и ресурсов, доступных для авторов и разработчиков документов, а также для разработчиков различных реализаций Markdown». В сентябре 2014 года Грубер возражал против использования «Markdown» в названии этого проекта, и он был переименован в CommonMark. CommonMark.org опубликовал несколько версий спецификации, эталонную реализацию, набор тестов и «объявил об окончательной спецификации 1.0 и наборе тестов в 2019 году». С тех пор не было выпущено ни одной спецификации 1.0, поскольку основные проблемы все еще остаются нерешенными. Тем не менее, следующие сайты и проекты приняли CommonMark: Discourse, GitHub, GitLab, Reddit, Qt, Stack Exchange (Stack Overflow) и Swift.\nВ марте 2016 г. были опубликованы два соответствующих информационных RFC в Интернете:\n  RFC 7763 представил текст/уценку типа MIME.\n  В RFC 7764 обсуждались и регистрировались варианты MultiMarkdown, GitHub Flavored Markdown (GFM), Pandoc и Markdown Extra среди прочих.\n  Реализация  Реализации Markdown доступны для более чем дюжины языков программирования; кроме того, многие платформы и фреймворки поддерживают Markdown. Например, плагины Markdown существуют для каждой крупной платформы для ведения блогов.\nХотя Markdown — это язык минимальной разметки, который читается и редактируется с помощью обычного текстового редактора, существуют специально разработанные редакторы для предварительного просмотра файлов со стилями, которые доступны для всех основных платформ. Многие текстовые редакторы и редакторы кода общего назначения имеют встроенные или доступные для загрузки плагины для подсветки синтаксиса для Markdown. Редакторы могут отображать окно предварительного просмотра рядом друг с другом или отображать код напрямую в режиме WYSIWYG.\n  JotterPad — онлайн-редактор WYSIWYG, поддерживающий Markdown и Fountain.\n  Doxygen — генератор документации исходного кода, поддерживающий Markdown с …","date":1652313600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652313600,"objectID":"af2400099b9817f92b365f10297a4a53","permalink":"https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1/","publishdate":"2022-05-12T00:00:00Z","relpermalink":"/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1/","section":"post","summary":"Markdown — это облегченный язык разметки для создания форматированного текста с помощью текстового редактора. Джон Грубер и Аарон Шварц создали Markdown в 2004 году как язык разметки, привлекательный для читателей в форме исходного кода. Markdown широко используется в блогах, мгновенных сообщениях, онлайн-форумах, программном обеспечении для совместной работы, страницах документации и файлах readme.","tags":["Academic"],"title":"Markdown","type":"post"},{"authors":["Галина Легиньких"],"categories":["Demo"],"content":"Моя неделя  На этой неделе я поехала домой, отдыхала с семьей. В свободное время занималась саморазвитием, так как заранее сделала лабораторные работы. Я читала литературу по Unix. Было очень весело с моими лучшими друзьями.\nДумаю, эта неделя прошла на 100%. Я очень хорошо отдохнула.\n   ","date":1652313600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652313600,"objectID":"e353871dd05f1a0ecac262c154be1b71","permalink":"https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","publishdate":"2022-05-12T00:00:00Z","relpermalink":"/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","section":"post","summary":"Эта неделя была посвящена отдыху.","tags":["Academic"],"title":"Моя неделя 2.05.2022 - 8.05.2022 (Этап 3)","type":"post"},{"authors":["Галина Легиньких"],"categories":["Demo"],"content":"Git  Git — это программа для отслеживания изменений в любом наборе файлов, обычно используемая для координации работы программистов, совместно разрабатывающих исходный код во время разработки программного обеспечения. Его цели включают скорость, целостность данных и поддержку распределенных нелинейных рабочих процессов (тысячи параллельных ветвей, работающих в разных системах).\nИстория  Разработка Git началась в апреле 2005 года, после того как многие разработчики ядра Linux отказались от доступа к BitKeeper, проприетарной системе управления исходным кодом (SCM), которую они использовали для поддержки проекта с 2002 года. Владелец авторских прав BitKeeper Ларри Маквой , отказалась от бесплатного использования продукта после того, как заявила, что Эндрю Триджелл создал SourcePuller путем обратного проектирования протоколов BitKeeper. Тот же самый инцидент подстегнул создание еще одной системы контроля версий, Mercurial.\nЛинусу Торвальдсу нужна была распределенная система, которую он мог бы использовать как BitKeeper, но ни одна из доступных бесплатных систем не соответствовала его потребностям. Торвальдс привел пример системы управления исходным кодом, которой требуется 30 секунд, чтобы применить исправление и обновить все связанные метаданные, и отметил, что это не соответствует потребностям разработки ядра Linux, где синхронизация с другими сопровождающими может потребовать 250 таких действий за раз. однажды. В качестве критерия дизайна он указал, что исправление должно занимать не более трех секунд, и добавил еще три цели:\nВозьмем Систему параллельных версий (CVS) в качестве примера того, чего делать не следует; если сомневаетесь, примите прямо противоположное решение. Поддержка распределенного рабочего процесса, подобного BitKeeper. Включите очень надежные средства защиты от коррупции, как случайной, так и злонамеренной. Эти критерии исключали все системы контроля версий, использовавшиеся в то время, поэтому сразу после разработки ядра Linux 2.6.12-rc2 Торвальдс решил написать свою собственную.\nРазработка Git началась 3 апреля 2005 года. Торвальдс объявил о проекте 6 апреля и на следующий день стал самостоятельным хостингом. Первое слияние нескольких филиалов состоялось 18 апреля. Торвальдс достиг поставленных целей; 29 апреля зарождающийся Git был протестирован с записью исправлений к дереву ядра Linux со скоростью 6,7 исправлений в секунду. 16 июня Git выпустил версию ядра 2.6.12.\n26 июля 2005 года Торвальдс передал техническое обслуживание Хунио Хамано, одному из основных участников проекта. Хамано отвечал за выпуск 1.0 21 декабря 2005 г. и остается основным сопровождающим проекта.\nДизайн  Дизайн Git был вдохновлен BitKeeper и Monotone. Git изначально разрабатывался как низкоуровневый движок системы контроля версий, поверх которого другие могли писать внешние интерфейсы, такие как Cogito или StGIT. С тех пор основной проект Git стал полноценной системой контроля версий, которую можно использовать напрямую. Несмотря на сильное влияние BitKeeper, Торвальдс сознательно избегал традиционных подходов, что привело к уникальному дизайну.\nРеализация  Git (основная реализация на C) в основном разработан для Linux, хотя он также поддерживает большинство основных операционных систем, включая BSD (DragonFly BSD, FreeBSD, NetBSD и OpenBSD), Solaris, macOS и Windows.\nПервый порт Git для Windows был в первую очередь фреймворком эмуляции Linux, на котором размещена версия Linux. При установке Git под Windows создается каталог Program Files с аналогичным названием, содержащий порт Mingw-w64 коллекции компиляторов GNU, Perl 5, MSYS2 (который сам является ответвлением Cygwin, Unix-подобной среды эмуляции для Windows) и различные другие порты или эмуляции Windows. утилит и библиотек Linux. В настоящее время собственные сборки Git для Windows распространяются в виде 32- и 64-разрядных установщиков. Официальный веб-сайт git в настоящее время поддерживает сборку Git для Windows, по-прежнему использующую среду MSYS2.\nJGit-реализация Git — это программная библиотека на чистом языке Java, предназначенная для встраивания в любое приложение Java. JGit используется в инструменте проверки кода Gerrit и в EGit, клиенте Git для Eclipse IDE.\nGo-git — это реализация Git с открытым исходным кодом, написанная на чистом Go. В настоящее время он используется для поддержки проектов в качестве интерфейса SQL для репозиториев кода Git и обеспечения шифрования для Git.\nРеализация Git в Dulwich — это чистый программный компонент Python для Python 2.7, 3.4 и 3.5.\nРеализация Git на libgit2 представляет собой программную библиотеку ANSI C без каких-либо других зависимостей, которую можно построить на нескольких платформах, включая Windows, Linux, macOS и BSD. Он имеет привязки для многих языков программирования, включая Ruby, Python и Haskell.\nJS-Git — это реализация JavaScript подмножества Git.\nБезопасность  Git не предоставляет механизмов контроля доступа, но был разработан для работы с другими инструментами, специализирующимися на контроле …","date":1652227200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652227200,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://galeginkikh.github.io/ru/post/getting-started/","publishdate":"2022-05-11T00:00:00Z","relpermalink":"/ru/post/getting-started/","section":"post","summary":"Git — это программа для отслеживания изменений в любом наборе файлов, обычно используемая для координации работы программистов, совместно разрабатывающих исходный код во время разработки программного обеспечения.","tags":["Academic"],"title":"Git","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://galeginkikh.github.io/ru/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ru/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Галина Легиньких","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://galeginkikh.github.io/ru/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]