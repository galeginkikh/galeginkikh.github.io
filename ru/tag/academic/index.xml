<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academic</title>
    <link>https://galeginkikh.github.io/ru/tag/academic/</link>
      <atom:link href="https://galeginkikh.github.io/ru/tag/academic/index.xml" rel="self" type="application/rss+xml" />
    <description>Academic</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Mon, 30 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://galeginkikh.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Academic</title>
      <link>https://galeginkikh.github.io/ru/tag/academic/</link>
    </image>
    
    <item>
      <title>Моя неделя 23.05.2022 - 29.05.2022 (Этап 6)</title>
      <link>https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      <guid>https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</guid>
      <description>&lt;p&gt;На этой неделе выполнила лабораторные №11, 12, 13 и Индивидуальный проект этап 5.&lt;/p&gt;
&lt;h1 id=&#34;лабораторная-работа-11&#34;&gt;Лабораторная работа №11&lt;/h1&gt;
&lt;p&gt;Изучила основы программирования в оболочке ОС UNIX. Научилась писать более сложные командные файлы с использованием логических управляющих конструкций и циклов.&lt;/p&gt;
&lt;h1 id=&#34;лабораторная-работа-13&#34;&gt;Лабораторная работа №13.&lt;/h1&gt;
&lt;p&gt;Приобрела простейшие навыки разработки, анализа, тестирования и отладки приложений в ОС типа UNIX/Linux на примере создания на языке программирования С калькулятора с простейшими функциями.&lt;/p&gt;
&lt;h1 id=&#34;индивидуальны-проект-этап-5&#34;&gt;Индивидуальны проект. Этап 5.&lt;/h1&gt;
&lt;p&gt;Я сделала заметки по проекту. Написала пост по языкам научного программирования&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      <guid>https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</guid>
      <description>&lt;p&gt;Python — высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью, ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ. Язык является полностью объектно-ориентированным в том плане, что всё является объектами. Необычной особенностью языка является выделение блоков кода пробельными отступами. Синтаксис ядра языка минималистичен, за счёт чего на практике редко возникает необходимость обращаться к документации. Сам же язык известен как интерпретируемый и используется в том числе для написания скриптов. Недостатками языка являются зачастую более низкая скорость работы и более высокое потребление памяти написанных на нём программ по сравнению с аналогичным кодом, написанным на компилируемых языках, таких как C или C++.&lt;/p&gt;
&lt;p&gt;Python является мультипарадигмальным языком программирования, поддерживающим императивное, процедурное, структурное, объектно-ориентированное программирование, метапрограммирование и функциональное программирование. Задачи обобщённого программирования решаются за счёт динамической типизации. Аспектно-ориентированное программирование частично поддерживается через декораторы, более полноценная поддержка обеспечивается дополнительными фреймворками. Такие методики как контрактное и логическое программирование можно реализовать с помощью библиотек или расширений. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений с глобальной блокировкой интерпретатора (GIL), высокоуровневые структуры данных. Поддерживается разбиение программ на модули, которые, в свою очередь, могут объединяться в пакеты.&lt;/p&gt;
&lt;p&gt;Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ и являющийся стандартом де-факто языка. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. CPython компилирует исходные тексты в высокоуровневый байт-код, который исполняется в стековой виртуальной машине. К другим трём основным реализациям языка относятся Jython (для JVM), IronPython (для CLR/.NET) и PyPy. PyPy написан на подмножестве языка Python (RPython) и разрабатывался как альтернатива CPython с целью повышения скорости исполнения программ, в том числе за счёт использования JIT-компиляции. Поддержка версии Python 2 закончилась в 2020 году. На текущий момент активно развивается версия языка Python 3. Разработка языка ведётся через предложения по расширению языка PEP (англ. Python Enhancement Proposal), в которых описываются нововведения, делаются корректировки согласно обратной связи от сообщества и документируются итоговые решения.&lt;/p&gt;
&lt;p&gt;Стандартная библиотека включает большой набор полезных переносимых функций, начиная с возможностей для работы с текстом и заканчивая средствами для написания сетевых приложений. Дополнительные возможности, такие как математическое моделирование, работа с оборудованием, написание веб-приложений или разработка игр, могут реализовываться посредством обширного количества сторонних библиотек, а также интеграцией библиотек, написанных на Си или C++, при этом и сам интерпретатор Python может интегрироваться в проекты, написанные на этих языках. Существует и специализированный репозиторий программного обеспечения, написанного на Python, — PyPI. Данный репозиторий предоставляет средства для простой установки пакетов в операционную систему и стал стандартом де-факто для Python. По состоянию на 2019 год в нём содержалось более 175 тысяч пакетов.&lt;/p&gt;
&lt;p&gt;Python стал одним из самых популярных языков, он используется в анализе данных, машинном обучении, DevOps и веб-разработке, а также в других сферах, включая разработку игр. За счёт читабельности, простого синтаксиса и отсутствия необходимости в компиляции язык хорошо подходит для обучения программированию, позволяя концентрироваться на изучении алгоритмов, концептов и парадигм. Отладка же и экспериментирование в значительной степени облегчаются тем фактом, что язык является интерпретируемым. Применяется язык многими крупными компаниями, такими как Google или Facebook. По состоянию на октябрь 2021 года Python занимает первое место в рейтинге TIOBE популярности языков программирования с показателем 11,27%. «Языком года» по версии TIOBE Python объявлялся в 2007, 2010, 2018 и 2020 годах.&lt;/p&gt;
&lt;h1 id=&#34;история&#34;&gt;&lt;strong&gt;История&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Задумка по реализации языка появилась в конце 1980-х годов, а разработка его реализации началась в 1989 году сотрудником голландского института CWI Гвидо ван Россумом. Для распределённой операционной системы Amoeba требовался расширяемый скриптовый язык, и Гвидо начал разрабатывать Python на досуге, позаимствовав некоторые наработки для языка ABC (Гвидо участвовал в разработке этого языка, ориентированного на обучение программированию). В феврале 1991 года Гвидо опубликовал исходный текст в группе новостей alt.sources. С самого начала Python проектировался как объектно-ориентированный язык.&lt;/p&gt;
&lt;p&gt;Гвидо ван Россум назвал язык в честь популярного британского комедийного телешоу 1970-х «Летающий цирк Монти Пайтона», поскольку автор был поклонником этого телешоу, как и многие другие разработчики того времени, а в самом шоу прослеживалась некая параллель с миром компьютерной техники.&lt;/p&gt;
&lt;p&gt;Наличие дружелюбного, отзывчивого сообщества пользователей считается, наряду с дизайнерской интуицией Гвидо, одним из факторов успеха Python. Развитие языка происходит согласно чётко регламентированному процессу создания, обсуждения, отбора и реализации документов PEP (англ. Python Enhancement Proposal) — предложений по развитию Python.&lt;/p&gt;
&lt;p&gt;3 декабря 2008 года, после длительного тестирования, вышла первая версия Python 3000 (или Python 3.0, также используется сокращение Py3k). В Python 3000 устранены многие недостатки архитектуры с максимально возможным (но не полным) сохранением совместимости со старыми версиями Python.&lt;/p&gt;
&lt;p&gt;Дата окончания срока поддержки Python 2.7 первоначально была установлена на 2015 год, а затем перенесена на 2020 год из опасения, что большая часть существующего кода не может быть легко перенесена на Python 3. Поддержка Python 2 была направлена лишь на уже существующие проекты, новые проекты должны были использовать Python 3. Больше никаких исправлений безопасности или других улучшений для Python 2.7 не будет выпущено. С окончанием срока службы Python 2.x поддерживаются только Python 3.6.x и более поздние версии.&lt;/p&gt;
&lt;h1 id=&#34;применение&#34;&gt;&lt;strong&gt;Применение&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Python — стабильный и распространённый язык. Он используется во многих проектах и в различных качествах: как основной язык программирования или для создания расширений и интеграции приложений. На Python реализовано большое количество проектов, также он активно используется для создания прототипов будущих программ.&lt;/p&gt;
&lt;p&gt;Python является лёгким в изучении языком, и часто изучается как первый язык, в том числе используется при обучении детей программированию. Как первый язык он хорошо подходит, поскольку программы на нём близки к естественному языку, на котором люди привыкли думать, а для написания корректной программы требуется минимальное количество ключевых слов. В других же языках, таких как C++, существует большое количество различных синтаксических конструкций и элементов языка, которым приходится уделять внимание вместо изучения алгоритмов.&lt;/p&gt;
&lt;p&gt;Являясь приложением с открытым исходным кодом, интерпретатор Python используется по всему миру и поставляется в составе операционных систем на базе Linux, а также в компьютерах от фирмы Apple. Python популярен среди индивидуальных разработчиков, но также используется крупными компаниями в достаточно серьёзных продуктах, ориентированных на получение прибыли. На Python написан Reddit. В Dropbox также активно применяется Python, а из-за сложностей динамической типизации и огромного количества кода компания перешла к статической типизации с помощью открытого проекта Mypy Также Python активно используется в Facebook и Instagram. Многие компании используют Python для тестирования аппаратного обеспечения, среди этих компаний значатся Intel, Cisco, Hewlett-Packard и IBM. Industrial Light &amp;amp; Magic и Pixar используют его при создании анимационных фильмов.&lt;/p&gt;
&lt;p&gt;Язык активно используется компанией Google в её поисковой системе, а Youtube в значительной степени написан с использованием Python. Кроме того, Google спонсирует разработку Python с 2010 года, и поддержку PyPI, основной системы распространения пакетов для Python.&lt;/p&gt;
&lt;p&gt;Сильными сторонами Python являются его модульность и возможность интегрироваться с другими языками программирования, в том числе в составе сложных комплексных приложений и систем. Сочетание простоты и лаконичности с большим количеством возможностей делает Python удобным в качестве скриптового языка[источник не указан 422 дня]. Многие проекты предоставляют прикладной интерфейс программирования на Python для написания скриптов, например, среды 3D-моделирования Autodesk Maya, Blender и Houdini, а также свободная геоинформационная система QGIS. Некоторые проекты реализуют базовую часть на более производительных языках программирования, а для упрощения работы предоставляют полноценный интерфейс прикладного программирования на Python[источник не указан 422 дня]. Так, движок свободного видеоредактора OpenShot реализован в виде библиотеки libopenshot, написанной на C++ с использованием библиотек на Си, а все возможности полностью покрыты прикладным интерфейсом программирования Python. Агентство национальной безопасности США использует Python для анализа данных, а NASA использует его при выполнении научных задач. Из инструментов, используемых в NASA, можно отметить свободный графический симулятор сети GNS3, который также хорошо зарекомендовал себя в корпоративной среде и используется в технологических компаниях, например, в Intel. На Python написана также свободная популярная программа нарезки 3D моделей для печати на 3D-принтерах Cura.&lt;/p&gt;
&lt;p&gt;Python с пакетами NumPy, SciPy и MatPlotLib активно используется как универсальная среда для научных расчётов в качестве замены распространённым специализированным коммерческим пакетам, таким как Matlab, предоставляя аналогичную функциональность и более низкий порог вхождения. По большей части на Python написана также графическая программа Veusz  (англ.)рус., позволяющая создавать качественные графики, готовые для размещения в научных публикациях. Библиотека Astropy — популярный инструмент для астрономических расчётов.&lt;/p&gt;
&lt;p&gt;Также Python подходит для выполнения нестандартных или сложных задач в системах сборки проектов, что обусловлено отсутствием необходимости предварительной компиляции исходных файлов. В проекте Google Test он используется для генерации исходного кода mock-объектов для классов языка C++.&lt;/p&gt;
&lt;p&gt;Интерпретатор Python может использоваться в качестве мощной командной оболочки и скриптового языка для написания командных файлов ОС. Лёгкость обращения из Python-скриптов к внешним программам и наличие библиотек, дающих доступ к управлению системой, делают Python удобным инструментом для системного администрирования. Он широко используется для этой цели на платформе Linux: обычно Python поставляется с системой, во многих дистрибутивах инсталляторы и визуальный интерфейс системных утилит написаны именно на Python. Используется он и в администрировании других Unix-систем, в частности, в Solaris и macOS. Кроссплатформенность самого языка и библиотек делает его привлекательным для унифицированной автоматизации задач системного администрирования в гетерогенных средах, где совместно применяются компьютеры с операционными системами различных типов.&lt;/p&gt;
&lt;p&gt;Будучи языком общего назначения Python применим почти во всех сферах деятельности. Фактически Python используется практически любой солидной компанией тем или иным образом как для выполнения текущих задач, так и в тестировании, администрировании или в разработке программных продуктов.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Моя неделя 16.05.2022 - 22.05.2022 (Этап 5)</title>
      <link>https://galeginkikh.github.io/ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      <guid>https://galeginkikh.github.io/ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</guid>
      <description>&lt;h2 id=&#34;моя-неделя&#34;&gt;&lt;strong&gt;Моя неделя&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Я заранее сделала много лабораторных:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Научилась работать в редакторе emacs. Изучала основы программирования в оболочке ОС UNIX/Linux.&lt;/li&gt;
&lt;li&gt;Научилась писать небольшие пакетные файлы.&lt;/li&gt;
&lt;li&gt;Научилась писать более сложные пакетные файлы, используя логические структуры управления и циклы.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;1&#34; srcset=&#34;
               /ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu2911a1e140c08098424f827f76406561_98783_0857367d80d258ae7521a972c34f0528.webp 400w,
               /ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu2911a1e140c08098424f827f76406561_98783_6fcef1222ff2cc0f5b9e1f98b504d741.webp 760w,
               /ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu2911a1e140c08098424f827f76406561_98783_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://galeginkikh.github.io/ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu2911a1e140c08098424f827f76406561_98783_0857367d80d258ae7521a972c34f0528.webp&#34;
               width=&#34;760&#34;
               height=&#34;521&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Также написала статью на тему &amp;ldquo;Топология сети&amp;rdquo;. Это довольно интересная тема для изучения.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;2&#34; srcset=&#34;
               /ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/2_huc5557d7784d054b5475a772a7f6eaebb_63151_794815310645d64cdef9bd24b5c1c32f.webp 400w,
               /ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/2_huc5557d7784d054b5475a772a7f6eaebb_63151_ef7302079f01c12c9a0a648d589f61bd.webp 760w,
               /ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/2_huc5557d7784d054b5475a772a7f6eaebb_63151_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://galeginkikh.github.io/ru/post/getting-started-5-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/2_huc5557d7784d054b5475a772a7f6eaebb_63151_794815310645d64cdef9bd24b5c1c32f.webp&#34;
               width=&#34;709&#34;
               height=&#34;721&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Моя неделя 09.05.2022 - 15.05.2022 (Этап 4)</title>
      <link>https://galeginkikh.github.io/ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
      <guid>https://galeginkikh.github.io/ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</guid>
      <description>&lt;h1 id=&#34;моя-неделя-09052022---15052022&#34;&gt;Моя неделя 09.05.2022 - 15.05.2022&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Эта неделя началась с праздника. Это День Победы. В этот день у меня была довольно насыщенная программа. Именно в этот день я вернулся в Москву после отпуска. Вечером 9 мая был праздничный солют.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;2&#34; srcset=&#34;
               /ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/2_hu6e87c2c510cc1d8701b1e07e118de19b_11689_23ff32988cd97aed524c68484d2cd598.webp 400w,
               /ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/2_hu6e87c2c510cc1d8701b1e07e118de19b_11689_f18cc6342e6da3ce3701279d3729b0e5.webp 760w,
               /ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/2_hu6e87c2c510cc1d8701b1e07e118de19b_11689_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://galeginkikh.github.io/ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/2_hu6e87c2c510cc1d8701b1e07e118de19b_11689_23ff32988cd97aed524c68484d2cd598.webp&#34;
               width=&#34;250&#34;
               height=&#34;250&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Затем, после недели отдыха, я приступила к работе. Необходимо было завершить и сдать все долги. Я заранее сделала еще две лабораторные работы по ОС. В операционной системе я научилась работать с двумя редакторами vi и emacs.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;3&#34; srcset=&#34;
               /ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/3_hu3471fac73aa742c0b3953b3fa3034252_166463_9f1650fc2fc2a9368644a071e5a24e2a.webp 400w,
               /ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/3_hu3471fac73aa742c0b3953b3fa3034252_166463_4e1f7b37028a02d0d3b1f2fb84172be4.webp 760w,
               /ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/3_hu3471fac73aa742c0b3953b3fa3034252_166463_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://galeginkikh.github.io/ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/3_hu3471fac73aa742c0b3953b3fa3034252_166463_9f1650fc2fc2a9368644a071e5a24e2a.webp&#34;
               width=&#34;641&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Я также много времени уделяла французскому языку.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;1&#34; srcset=&#34;
               /ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/1_hu564d71c140a870bcde8ba176f8141327_346121_00f0ea29c5075156db011cff814278a4.webp 400w,
               /ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/1_hu564d71c140a870bcde8ba176f8141327_346121_bec3e039053af2c65794dcb53a3a62d8.webp 760w,
               /ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/1_hu564d71c140a870bcde8ba176f8141327_346121_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://galeginkikh.github.io/ru/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/image/1_hu564d71c140a870bcde8ba176f8141327_346121_00f0ea29c5075156db011cff814278a4.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Эта неделя была довольно продуктивной.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Отчет в markdown</title>
      <link>https://galeginkikh.github.io/ru/post/getting-started-3-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
      <guid>https://galeginkikh.github.io/ru/post/getting-started-3-%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</guid>
      <description>&lt;h1 id=&#34;отчет-в-markdown&#34;&gt;&lt;strong&gt;Отчет в markdown&lt;/strong&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Отчет:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Титульный лист&lt;/li&gt;
&lt;li&gt;Содержание&lt;/li&gt;
&lt;li&gt;Цель&lt;/li&gt;
&lt;li&gt;Теоретическое введение&lt;/li&gt;
&lt;li&gt;Выполнение работы&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Markdown&lt;/em&gt; - это облегченный язык разметки, который является инструментом для преобразования кода в HTML.&lt;/p&gt;
&lt;p&gt;Главной особенностью этого языка является простейший синтаксис, который служит для упрощения написания и чтения кода разметки, что, в свою очередь, облегчает его исправление.&lt;/p&gt;
&lt;p&gt;Теперь давайте подробнее рассмотрим функции языка разметки Markdown.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Блочные элементы&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Параграфы и разрывы строк;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Заголовки;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Цитаты;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Списки;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Блоки кода;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Горизонтальные (разделительные) линии.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Строчные элементы&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ссылки;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Выделение текста;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Кодовые фрагменты строк;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Изображения.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;описание-синтаксиса&#34;&gt;&lt;strong&gt;ОПИСАНИЕ СИНТАКСИСА&lt;/strong&gt;&lt;/h1&gt;
&lt;h1 id=&#34;параграфы-и-разрывы-строк&#34;&gt;Параграфы и разрывы строк&lt;/h1&gt;
&lt;p&gt;Для того, чтобы создать параграф с использованием синтаксиса языка Markdown, достаточно отделить строки текста одной (или более) пустой строкой (пустой считается всякая строка, которая не содержит в себе ничего, кроме пробелов и символов табуляции).&lt;/p&gt;
&lt;p&gt;Для того, чтобы вставить видимый перенос строки (элемент &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;) необходимо окончить строку двумя пробелами и нажатием клавиши «Enter».&lt;/p&gt;
&lt;p&gt;Многие элементы синтаксиса Markdown выглядят и работают гораздо лучше в случае, когда их форматируют с помощью «жесткого перевода строк» (разделение строк, осуществленное самим пользователем, а не программой автоматически). К таким элементам относятся цитаты, списки и пр.&lt;/p&gt;
&lt;h1 id=&#34;заголовки&#34;&gt;Заголовки&lt;/h1&gt;
&lt;p&gt;Язык разметки Markdown поддерживает 2 стиля обозначения заголовков: подчеркивание и выделение символом («#»).&lt;/p&gt;
&lt;p&gt;Выделение заголовков с помощью подчеркивания производится знаками равенства («=») в случае, если заголовок первого уровня, и дефисами («-») в случае, если заголовок второго уровня. Количество знаков подчеркивания не ограничивается.&lt;/p&gt;
&lt;p&gt;При выделении заголовков с помощью символа («#») используется от одного до шести данных символов, которые устанавливаются в начале строки (перед заголовком). В данном случае количество символов соответствует уровню заголовка. Кроме того, заголовок возможно снабдить закрывающимися символами («#»), хотя это и не является обязательным. Количество закрывающихся символов не обязано соответствовать количеству начальных символов. Уровень заголовка определяется по количеству начальных символов.&lt;/p&gt;
&lt;p&gt;Заголовки первого и второго уровней, выполненные с помощью подчеркивания, выглядят следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Заголовок первого уровня
========================
Заголовок второго уровня
-------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Заголовки первого, третьего и шестого уровней, выполненные с помощью символа («#»), выглядят следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#  Заголовок первого уровня
### Заголовок третьего уровня
###### Заголовок шестого уровня
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Приведенные выше заголовки, выполненные с помощью символа («#») тождественны следующим:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#  Заголовок первого уровня #
### Заголовок третьего уровня ###
###### Заголовок шестого уровня ######
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате на экран выводится следующее:&lt;/p&gt;
&lt;h1 id=&#34;заголовок-первого-уровня&#34;&gt;Заголовок первого уровня&lt;/h1&gt;
&lt;h2 id=&#34;заголовок-второго-уровня&#34;&gt;Заголовок второго уровня&lt;/h2&gt;
&lt;h1 id=&#34;заголовок-первого-уровня-1&#34;&gt;Заголовок первого уровня&lt;/h1&gt;
&lt;h3 id=&#34;заголовок-третьего-уровня&#34;&gt;Заголовок третьего уровня&lt;/h3&gt;
&lt;h6 id=&#34;заголовок-шестого-уровня&#34;&gt;Заголовок шестого уровня&lt;/h6&gt;
&lt;h1 id=&#34;цитаты&#34;&gt;Цитаты&lt;/h1&gt;
&lt;p&gt;Для обозначения цитат в языке Markdown используется знак «больше» («&amp;gt;»). Его можно вставлять как перед каждой строкой цитаты, так и только перед первой строкой параграфа.&lt;/p&gt;
&lt;p&gt;Также синтаксис Markdown позволяет создавать вложенные цитаты (цитаты внутри цитат). Для их разметки используются дополнительные уровни знаков цитирования («&amp;gt;»).&lt;/p&gt;
&lt;p&gt;Цитаты в Markdown могут содержать всевозможные элементы разметки.
Цитаты в языке Markdown выглядят следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;Это пример цитаты,
&amp;gt;в которой перед каждой строкой
&amp;gt;ставится угловая скобка.

&amp;gt;Это пример цитаты,
в которой угловая скобка
ставится только перед началом нового параграфа.
&amp;gt;Второй параграф.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вложение цитаты в цитату выглядит следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Первый уровень цитирования
&amp;gt;&amp;gt; Второй уровень цитирования
&amp;gt;&amp;gt;&amp;gt; Третий уровень цитирования
&amp;gt;
&amp;gt;Первый уровень цитирования
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате на экран выводится следующее:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Это пример цитаты,
в которой перед каждой строкой
ставится угловая скобка.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Это пример цитаты,
в которой угловая скобка
ставится только перед началом нового параграфа.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Второй параграф.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Вложенная цитата:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Первый уровень цитирования&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Второй уровень цитирования&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Третий уровень цитирования&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Первый уровень цитирования&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Уровень цитирования не может превышать 15-й.&lt;/p&gt;
&lt;h1 id=&#34;списки&#34;&gt;Списки&lt;/h1&gt;
&lt;p&gt;Markdown поддерживает упорядоченные (нумерованные) и неупорядоченные (ненумерованные) списки.&lt;/p&gt;
&lt;p&gt;Для формирования неупорядоченный списков используются такие маркеры, как звездочки, плюсы и дефисы. Все перечисленные маркеры могут использоваться взаимозаменяемо.&lt;/p&gt;
&lt;p&gt;Для формирования упорядоченных списков в качестве маркеров используются числа с точкой. Важной особенностью в данном случае является то, что сами номера, с помощью которых формируется список, не важны, так как они не оказывают влияния на выходной HTML код. Как бы ни нумеровал пользователь список, на выходе он в любом случае будет иметь упорядоченный список, начинающийся с единицы (1, 2, 3…). Эту особенность стоит учитывать в том случае, когда необходимо использовать порядковые номера элементов в списке, чтобы они соответствовали номерам, получающимся в HTML.&lt;/p&gt;
&lt;p&gt;Упорядоченные списки всегда следует начинать с единицы. Маркеры списков обычно начинаются с начала строки, однако они могут быть сдвинуты, но не более чем на 3 пробела. За маркером должен следовать пробел, либо символ табуляции.&lt;/p&gt;
&lt;p&gt;При  необходимости в список можно вставить цитату. В этом случае обозначения цитирования ( «&amp;gt;» ) нужно писать с отступом.
Упорядоченные списки выглядят следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.	Проводник
2.	Полупроводник
3.	Диэлектрик
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Неупорядоченные списки выглядят следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Проводник
* Полупроводник
* Диэлектрик
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Или&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Проводник
- Полупроводник
- Диэлектрик
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Или&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ Проводник
+ Полупроводник
+ Диэлектрик
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;На выходе всех трех перечисленных вариантов имеется один и тот же результат.&lt;/p&gt;
&lt;p&gt;В результате на экран выводится следующее:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Проводник&lt;/li&gt;
&lt;li&gt;Полупроводник&lt;/li&gt;
&lt;li&gt;Диэлектрик&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;и&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Проводник&lt;/li&gt;
&lt;li&gt;Полупроводник&lt;/li&gt;
&lt;li&gt;Диэлектрик&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Цитата, вставленная в список, выглядит следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Элемент списка с цитатой:

    &amp;gt; Это цитата
    &amp;gt; внутри элемента списка.

2. Второй элемент списка
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате на экран выводится следующее:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Элемент списка с цитатой:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Это цитата
внутри элемента списка.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Второй элемент списка&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;При вставке цитат в элементы списка важно учитывать, что элементы списка должны находиться на одном уровне, а цитаты должны указываться с отступом. В случае, если правило с единым уровнем списка не соблюдается, следующий после цитаты элемент списка будет автоматически нумероваться цифрой «1.».&lt;/p&gt;
&lt;p&gt;Кроме того, при необходимости в список можно вставить исходный код. В этом случае его нужно писать с двойным отступом – 8 пробелов или 2 символа табуляции.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Элемент списка, содержащий исходный код&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;исходный код &amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;блоки-кода&#34;&gt;Блоки кода&lt;/h1&gt;
&lt;p&gt;Отформатированные блоки кода используются в случае необходимости процитировать исходный код программ или разметки.&lt;/p&gt;
&lt;p&gt;Для создания блока кода в языке Markdown необходимо каждую строку параграфа начинать  с отступа, состоящего из четырех пробелов или  одного символа табуляции. Блок кода продолжается до тех пор, пока не встретится строка без отступа (или конец текста).  Внутри блока кода амперсанды («&amp;amp;») и угловые скобки («&amp;lt;» и «&amp;gt;») автоматически преобразуются в элементы HTML разметки. Кроме того, следует отметить, что внутри блоков кода обычный синтаксис Markdown не обрабатывается.&lt;/p&gt;
&lt;p&gt;Блок кода в Markdown выглядит следующим образом:&lt;/p&gt;
&lt;p&gt;Это обычный параграф:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Это блок кода
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;горизонтальные-линии-разделители&#34;&gt;Горизонтальные линии (разделители)&lt;/h1&gt;
&lt;p&gt;Для того чтобы создать горизонтальную линию с использованием синтаксиса языка Markdown, необходимо поместить три (или более)дефиса или звездочки на отдельной строке текста. Между ними возможно располагать пробелы.&lt;/p&gt;
&lt;p&gt;Горизонтальные линии в Markdown выглядят следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Первая часть текста, который необходимо разделить

***

Вторая часть текста, который необходимо разделить
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Или&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Первая часть текста, который необходимо разделить

---

Вторая часть текста, который необходимо разделить
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате на экран выводится следующее:&lt;/p&gt;
&lt;p&gt;Первая часть текста, который необходимо разделить&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Вторая часть текста, который необходимо разделить&lt;/p&gt;
&lt;p&gt;При использовании данного инструмента важно помнить, что после первой части текста и перед второй необходимо оставлять пустую строку. Данное правило необходимо соблюдать только при использовании дефисов. Если его не соблюдать, на экран будет выведен заголовок второго уровня и строка обычного текста.  При использовании символа звездочки данным правилом можно пренебречь.&lt;/p&gt;
&lt;h2 id=&#34;строчные-элементы&#34;&gt;Строчные элементы&lt;/h2&gt;
&lt;h1 id=&#34;ссылки&#34;&gt;Ссылки&lt;/h1&gt;
&lt;p&gt;Markdown поддерживает два стиля оформления ссылок:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Гиперссылка, с немедленным указанием адреса (внутритекстовая);&lt;/li&gt;
&lt;li&gt;Гиперссылка, подобная сноске.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Подразумевается, что помимо URL-адреса существует еще текст ссылки. Он заключается в квадратные скобки.&lt;/p&gt;
&lt;p&gt;Для создания внутритекстовой гиперссылки необходимо использовать круглые скобки сразу после закрывающей квадратной. Внутри них необходимо поместить URL-адрес. В них же возможно расположить название, заключенное в кавычки, которое будет отображаться при наведении, но этот пункт не является обязательным.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  [пример](http://example.com/ &amp;quot;Необязательная подсказка&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате на экран выводится следующее:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://example.com/&#34; title=&#34;Необязательная подсказка&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;пример&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;При ссылке на локальную директорию возможно использование относительного пути (от текущей страницы, сайта и т.п.)&lt;/p&gt;
&lt;p&gt;При создании сносной гиперссылки вместо целевого адреса используется вторая пара квадратных скобок, внутри которых помещается метка, идентификатор ссылки (id).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[пример][id]:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Также, можно использовать пробел, чтобы отделять 2 пары квадратных скобок:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[пример] [id]: 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В этом случае возможно определить идентификатор в любом месте документа:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: http://example.com/ &amp;quot;Необязательная подсказка&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате на экран выводится следующее:&lt;/p&gt;
&lt;p&gt;[пример] &lt;a href=&#34;http://example.com/&#34; title=&#34;Необязательная подсказка&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;id&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Иными словами, она состоит из следующих элементов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Идентификатор ссылки, окружённый квадратными скобками (которым может предшествовать необязательный отступ от одного до трёх пробелов);&lt;/li&gt;
&lt;li&gt;Двоеточие;&lt;/li&gt;
&lt;li&gt;Один или несколько пробелов (или символов табуляции);&lt;/li&gt;
&lt;li&gt;URL гиперссылки;&lt;/li&gt;
&lt;li&gt;Необязательный заголовок (подсказка к изображению, которая всплывает при наведении на него) гиперссылки, заключённый либо в двойные или одиночные кавычки, либо в скобки.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Идентификаторы ссылок могут состоять из букв, цифр, пробелов и знаков пунктуации, однако они не чувствительны к регистру. То есть эти два варианта эквивалентны:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[текст ссылки][a]
[текст ссылки][A]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Markdown позволяет также использовать неявно выраженный идентификатор (сокращенный). В этом случае метка не приводится, вместо неё текст гиперссылки используется  и в качестве её имени, а вторая пара квадратных скобок остаётся пустою.&lt;/p&gt;
&lt;p&gt;Например, чтобы сделать слово «Example» гиперссылкой, ведущей на сайт &lt;a href=&#34;http://example.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://example.com/&lt;/a&gt;, достаточно написать:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Example][]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;и затем определить гиперссылку:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Example]: http://example.com/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате на экран выводится следующее:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://example.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Example&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;выделение-текста&#34;&gt;Выделение текста&lt;/h1&gt;
&lt;p&gt;Markdown воспринимает звёздочки «*» и символы подчёркивания «_» как признаки смыслового выделения текста:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Текст, окружённый одиночными «*» или «_», будет заключен в HTML-тэг &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Текст, окружённый двойными «*» или «_», будет заключен в HTML-тэг &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Иными словами, текст, окруженный одинарными символами, выделяется курсивным шрифтом, а текст, окруженный двойными символами, выделяется полужирным шрифтом.&lt;/p&gt;
&lt;p&gt;Также, выделенный фрагмент может находиться в любой части слова.
Текст, выделенный курсивом с использованием синтаксиса языка Markdown, выглядит следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Пример*  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Пример&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Текст, выделенный полужирным шрифтом с использованием синтаксиса языка Markdown, выглядит следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**Пример**
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Пример&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Текст, выделенный курсивным полужирным шрифтом с использованием синтаксиса языка Markdown выглядит следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;***Пример***
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Пример&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Все приведенные выше примеры аналогичны следующим:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_Пример_

__Пример__

Пере___распред___деление

___Пример___  
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;кодовые-фрагменты-строк&#34;&gt;Кодовые фрагменты строк&lt;/h1&gt;
&lt;p&gt;Чтобы отметить фрагмент строки, содержащий код, необходимо окружить его обратными апострофами «`».  При использовании кодовых фрагментов строк текст будет отображаться в виде моноширинного шрифта.&lt;/p&gt;
&lt;p&gt;В отличие от блоков кода, кодовый фрагмент позволяет поместить код внутрь обычного абзаца текста.&lt;/p&gt;
&lt;p&gt;Кодовый фрагмент строки в языке Markdown выглядит следующим образом:&lt;/p&gt;
&lt;p&gt;Используйте оператор &lt;code&gt;if&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;изображения&#34;&gt;Изображения&lt;/h1&gt;
&lt;p&gt;В Markdown существует 2 способа вставки изображений в документ:&lt;/p&gt;
&lt;p&gt;a.	С помощью непосредственного указания URL-адреса изображения. Синтаксис данной команды выглядит следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![Альтернативный текст](/путь/к/изображению.jpg)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;или&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![Альтернативный текст](/путь/к/изображению.jpg &amp;quot;Подсказка&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Иными словами, он состоит из следующих элементов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;восклицательный знак;&lt;/li&gt;
&lt;li&gt;квадратные скобки, в которых указывается альтернативный изображению текст (он станет содержимым атрибута в элементе img);&lt;/li&gt;
&lt;li&gt;круглые скобки, содержащие URL-адрес или относительный путь изображения, а также (необязательно) всплывающую подсказку, заключённуе в двойные или одиночные кавычки.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;b.	С помощью метки-идентификатора.  Синтаксис данной команды записывается следующим образом:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![Альтернативный текст][id]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;где «id» — имя определённой метки изображения. Метки изображений определяются при помощи синтаксиса, совершенно идентичного меткам гиперссылок:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: путь/к/изображению &amp;quot;Необязательная подсказка&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Важной особенностью является то, что Markdown не позволяет задать размеры изображения (ширину, высоту).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F1/</guid>
      <description>&lt;h2 id=&#34;markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Markdown&lt;/em&gt; — это облегченный язык разметки для создания форматированного текста с помощью текстового редактора. Джон Грубер и Аарон Шварц создали Markdown в 2004 году как язык разметки, привлекательный для читателей в форме исходного кода. Markdown широко используется в блогах, мгновенных сообщениях, онлайн-форумах, программном обеспечении для совместной работы, страницах документации и файлах readme.&lt;/p&gt;
&lt;p&gt;Первоначальное описание Markdown содержало неясности и вызывало вопросы без ответов, в результате чего реализации как намеренно, так и случайно отличались от исходной версии. Это было решено в 2014 году, когда давние участники Markdown выпустили CommonMark, недвусмысленную спецификацию и набор тестов для Markdown.&lt;/p&gt;
&lt;h2 id=&#34;история&#34;&gt;&lt;strong&gt;История&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;В 2002 году Аарон Шварц создал atx, «настоящий структурированный текстовый формат». Затем Шварц и Грубер вместе работали над созданием языка Markdown в 2004 году с целью дать людям возможность «писать, используя удобный для чтения и написания простой текстовый формат, при необходимости конвертировать его в структурно допустимый XHTML (или HTML). )».&lt;/p&gt;
&lt;p&gt;Ключевой целью его разработки была удобочитаемость, чтобы язык читался как есть, не выглядя так, как будто он был размечен тегами или инструкциями по форматированию, в отличие от текста, отформатированного с помощью языка разметки, такого как Rich Text Format (RTF) или HTML, который иметь очевидные теги и инструкции по форматированию. С этой целью его основным источником вдохновения являются существующие соглашения для разметки простого текста в электронной почте, хотя он также опирается на более ранние языки разметки, в частности, setext, Textile и reStructuredText.&lt;/p&gt;
&lt;p&gt;Грубер написал Perl-скрипт Markdown.pl, который преобразует размеченный вводимый текст в допустимый, правильно сформированный XHTML или HTML и заменяет угловые скобки (&amp;lt;, &amp;gt;) и амперсанды (&amp;amp;) соответствующими ссылками на символьные сущности. Он может выполнять роль автономного скрипта, плагина для Blosxom или Movable Type или текстового фильтра для BBEdit.&lt;/p&gt;
&lt;h2 id=&#34;рост-и-расхождение&#34;&gt;&lt;strong&gt;Рост и расхождение&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Поскольку популярность Markdown быстро росла, появилось множество реализаций Markdown, в основном из-за необходимости дополнительных функций, таких как таблицы, сноски, списки определений и Markdown внутри блоков HTML.&lt;/p&gt;
&lt;p&gt;Поведение некоторых из них отличалось от эталонной реализации, поскольку Markdown характеризовался только неформальной спецификацией и реализацией Perl для преобразования в HTML.&lt;/p&gt;
&lt;p&gt;В то же время внимание привлек ряд неясностей в неофициальной спецификации. Эти проблемы стимулировали создание таких инструментов, как Babelmark, для сравнения результатов различных реализаций, а также усилия некоторых разработчиков парсеров Markdown по стандартизации. Однако Грубер утверждал, что полная стандартизация была бы ошибкой: «Разные сайты (и люди) имеют разные потребности. Ни один синтаксис не сделает всех счастливыми».&lt;/p&gt;
&lt;h2 id=&#34;стандартизация&#34;&gt;&lt;strong&gt;Стандартизация&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;С 2012 года группа людей, включая Джеффа Этвуда и Джона Макфарлейна, запустила то, что Этвуд охарактеризовал как усилия по стандартизации. Веб-сайт сообщества теперь направлен на «документирование различных инструментов и ресурсов, доступных для авторов и разработчиков документов, а также для разработчиков различных реализаций Markdown». В сентябре 2014 года Грубер возражал против использования «Markdown» в названии этого проекта, и он был переименован в CommonMark. CommonMark.org опубликовал несколько версий спецификации, эталонную реализацию, набор тестов и «объявил об окончательной спецификации 1.0 и наборе тестов в 2019 году». С тех пор не было выпущено ни одной спецификации 1.0, поскольку основные проблемы все еще остаются нерешенными. Тем не менее, следующие сайты и проекты приняли CommonMark: Discourse, GitHub, GitLab, Reddit, Qt, Stack Exchange (Stack Overflow) и Swift.&lt;/p&gt;
&lt;p&gt;В марте 2016 г. были опубликованы два соответствующих информационных RFC в Интернете:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RFC 7763 представил текст/уценку типа MIME.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В RFC 7764 обсуждались и регистрировались варианты MultiMarkdown, GitHub Flavored Markdown (GFM), Pandoc и Markdown Extra среди прочих.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;реализация&#34;&gt;&lt;strong&gt;Реализация&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Реализации Markdown доступны для более чем дюжины языков программирования; кроме того, многие платформы и фреймворки поддерживают Markdown. Например, плагины Markdown существуют для каждой крупной платформы для ведения блогов.&lt;/p&gt;
&lt;p&gt;Хотя Markdown — это язык минимальной разметки, который читается и редактируется с помощью обычного текстового редактора, существуют специально разработанные редакторы для предварительного просмотра файлов со стилями, которые доступны для всех основных платформ. Многие текстовые редакторы и редакторы кода общего назначения имеют встроенные или доступные для загрузки плагины для подсветки синтаксиса для Markdown. Редакторы могут отображать окно предварительного просмотра рядом друг с другом или отображать код напрямую в режиме WYSIWYG.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;JotterPad&lt;/em&gt; — онлайн-редактор WYSIWYG, поддерживающий Markdown и Fountain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Doxygen&lt;/em&gt; — генератор документации исходного кода, поддерживающий Markdown с дополнительными функциями.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;RStudio&lt;/em&gt; — IDE для R. Он предоставляет функцию-оболочку C++ для варианта уценки, который называется sundown.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Flavored Markdown (GFM) игнорирует символы подчеркивания в словах и добавляет подсветку синтаксиса, списки задач и таблицы RMarkdown.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Nextcloud Notes&lt;/em&gt; — приложение по умолчанию для создания заметок на платформе Nextcloud поддерживает форматирование с использованием Markdown.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Моя неделя 2.05.2022 - 8.05.2022 (Этап 3)</title>
      <link>https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</guid>
      <description>&lt;h2 id=&#34;моя-неделя&#34;&gt;&lt;strong&gt;Моя неделя&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;На этой неделе я поехала домой, отдыхала с семьей. В свободное время занималась саморазвитием, так как заранее сделала лабораторные работы. Я читала литературу по Unix. Было очень весело с моими лучшими друзьями.&lt;/p&gt;
&lt;p&gt;Думаю, эта неделя прошла на 100%. Я очень хорошо отдохнула.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;1&#34; srcset=&#34;
               /ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu82fe5bf69b402c4322cc549e8ac8fbc2_27060_0f05c4d3ed0fce551ff318cfde2c3d0d.webp 400w,
               /ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu82fe5bf69b402c4322cc549e8ac8fbc2_27060_1b87acab4ec3ee7d374137f5f68980fa.webp 760w,
               /ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu82fe5bf69b402c4322cc549e8ac8fbc2_27060_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://galeginkikh.github.io/ru/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/images/1_hu82fe5bf69b402c4322cc549e8ac8fbc2_27060_0f05c4d3ed0fce551ff318cfde2c3d0d.webp&#34;
               width=&#34;600&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://galeginkikh.github.io/ru/post/getting-started/</link>
      <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
      <guid>https://galeginkikh.github.io/ru/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;git&#34;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Git — это программа для отслеживания изменений в любом наборе файлов, обычно используемая для координации работы программистов, совместно разрабатывающих исходный код во время разработки программного обеспечения. Его цели включают скорость, целостность данных и поддержку распределенных нелинейных рабочих процессов (тысячи параллельных ветвей, работающих в разных системах).&lt;/p&gt;
&lt;h2 id=&#34;история&#34;&gt;&lt;strong&gt;История&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Разработка Git началась в апреле 2005 года, после того как многие разработчики ядра Linux отказались от доступа к BitKeeper, проприетарной системе управления исходным кодом (SCM), которую они использовали для поддержки проекта с 2002 года. Владелец авторских прав BitKeeper Ларри Маквой , отказалась от бесплатного использования продукта после того, как заявила, что Эндрю Триджелл создал SourcePuller путем обратного проектирования протоколов BitKeeper. Тот же самый инцидент подстегнул создание еще одной системы контроля версий, Mercurial.&lt;/p&gt;
&lt;p&gt;Линусу Торвальдсу нужна была распределенная система, которую он мог бы использовать как BitKeeper, но ни одна из доступных бесплатных систем не соответствовала его потребностям. Торвальдс привел пример системы управления исходным кодом, которой требуется 30 секунд, чтобы применить исправление и обновить все связанные метаданные, и отметил, что это не соответствует потребностям разработки ядра Linux, где синхронизация с другими сопровождающими может потребовать 250 таких действий за раз. однажды. В качестве критерия дизайна он указал, что исправление должно занимать не более трех секунд, и добавил еще три цели:&lt;/p&gt;
&lt;p&gt;Возьмем Систему параллельных версий (CVS) в качестве примера того, чего делать не следует; если сомневаетесь, примите прямо противоположное решение. Поддержка распределенного рабочего процесса, подобного BitKeeper. Включите очень надежные средства защиты от коррупции, как случайной, так и злонамеренной. Эти критерии исключали все системы контроля версий, использовавшиеся в то время, поэтому сразу после разработки ядра Linux 2.6.12-rc2 Торвальдс решил написать свою собственную.&lt;/p&gt;
&lt;p&gt;Разработка Git началась 3 апреля 2005 года. Торвальдс объявил о проекте 6 апреля и на следующий день стал самостоятельным хостингом. Первое слияние нескольких филиалов состоялось 18 апреля. Торвальдс достиг поставленных целей; 29 апреля зарождающийся Git был протестирован с записью исправлений к дереву ядра Linux со скоростью 6,7 исправлений в секунду. 16 июня Git выпустил версию ядра 2.6.12.&lt;/p&gt;
&lt;p&gt;26 июля 2005 года Торвальдс передал техническое обслуживание Хунио Хамано, одному из основных участников проекта. Хамано отвечал за выпуск 1.0 21 декабря 2005 г. и остается основным сопровождающим проекта.&lt;/p&gt;
&lt;h2 id=&#34;дизайн&#34;&gt;&lt;strong&gt;Дизайн&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Дизайн Git был вдохновлен BitKeeper и Monotone. Git изначально разрабатывался как низкоуровневый движок системы контроля версий, поверх которого другие могли писать внешние интерфейсы, такие как Cogito или StGIT. С тех пор основной проект Git стал полноценной системой контроля версий, которую можно использовать напрямую. Несмотря на сильное влияние BitKeeper, Торвальдс сознательно избегал традиционных подходов, что привело к уникальному дизайну.&lt;/p&gt;
&lt;h2 id=&#34;реализация&#34;&gt;&lt;strong&gt;Реализация&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Git (основная реализация на C) в основном разработан для Linux, хотя он также поддерживает большинство основных операционных систем, включая BSD (DragonFly BSD, FreeBSD, NetBSD и OpenBSD), Solaris, macOS и Windows.&lt;/p&gt;
&lt;p&gt;Первый порт Git для Windows был в первую очередь фреймворком эмуляции Linux, на котором размещена версия Linux. При установке Git под Windows создается каталог Program Files с аналогичным названием, содержащий порт Mingw-w64 коллекции компиляторов GNU, Perl 5, MSYS2 (который сам является ответвлением Cygwin, Unix-подобной среды эмуляции для Windows) и различные другие порты или эмуляции Windows. утилит и библиотек Linux. В настоящее время собственные сборки Git для Windows распространяются в виде 32- и 64-разрядных установщиков. Официальный веб-сайт git в настоящее время поддерживает сборку Git для Windows, по-прежнему использующую среду MSYS2.&lt;/p&gt;
&lt;p&gt;JGit-реализация Git — это программная библиотека на чистом языке Java, предназначенная для встраивания в любое приложение Java. JGit используется в инструменте проверки кода Gerrit и в EGit, клиенте Git для Eclipse IDE.&lt;/p&gt;
&lt;p&gt;Go-git — это реализация Git с открытым исходным кодом, написанная на чистом Go. В настоящее время он используется для поддержки проектов в качестве интерфейса SQL для репозиториев кода Git и обеспечения шифрования для Git.&lt;/p&gt;
&lt;p&gt;Реализация Git в Dulwich — это чистый программный компонент Python для Python 2.7, 3.4 и 3.5.&lt;/p&gt;
&lt;p&gt;Реализация Git на libgit2 представляет собой программную библиотеку ANSI C без каких-либо других зависимостей, которую можно построить на нескольких платформах, включая Windows, Linux, macOS и BSD. Он имеет привязки для многих языков программирования, включая Ruby, Python и Haskell.&lt;/p&gt;
&lt;p&gt;JS-Git — это реализация JavaScript подмножества Git.&lt;/p&gt;
&lt;h2 id=&#34;безопасность&#34;&gt;&lt;strong&gt;Безопасность&lt;/strong&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Git не предоставляет механизмов контроля доступа, но был разработан для работы с другими инструментами, специализирующимися на контроле доступа.&lt;/p&gt;
&lt;p&gt;17 декабря 2014 года был обнаружен эксплойт, затрагивающий версии клиента Git для Windows и macOS. Злоумышленник может выполнить произвольный код на целевом компьютере с установленным Git, создав вредоносное дерево (каталог) Git с именем .git (каталог в репозиториях Git, в котором хранятся все данные репозитория) в другом случае (например, .GIT). или .Git, необходимо, потому что Git не позволяет вручную создавать версию .git со строчными буквами) с вредоносными файлами в подкаталоге .git/hooks (папка с исполняемыми файлами, которые запускает Git) в репозитории, созданном злоумышленником или в репозитории, который злоумышленник может изменить. Если пользователь Windows или Mac извлекает (загружает) версию репозитория с вредоносным каталогом, а затем переключается на этот каталог, файл . git будет перезаписан (из-за нечувствительности к регистру файловых систем Windows и Mac), и могут быть запущены вредоносные исполняемые файлы в .git/hooks, что приведет к выполнению команд злоумышленника. Злоумышленник также может изменить файл конфигурации .git/config, что позволяет злоумышленнику создавать вредоносные псевдонимы Git (псевдонимы для команд Git или внешних команд) или изменять существующие псевдонимы для выполнения вредоносных команд при запуске. Уязвимость была исправлена ​​в версии 2.2.1 Git, выпущенной 17 декабря 2014 года и объявленной на следующий день. который позволяет злоумышленнику создавать вредоносные псевдонимы Git (псевдонимы для команд Git или внешних команд) или изменять существующие псевдонимы для выполнения вредоносных команд при запуске. Уязвимость была исправлена ​​в версии 2.2.1 Git, выпущенной 17 декабря 2014 года и объявленной на следующий день. который позволяет злоумышленнику создавать вредоносные псевдонимы Git (псевдонимы для команд Git или внешних команд) или изменять существующие псевдонимы для выполнения вредоносных команд при запуске. Уязвимость была исправлена ​​в версии 2.2.1 Git, выпущенной 17 декабря 2014 года и объявленной на следующий день.&lt;/p&gt;
&lt;p&gt;Версия Git 2.6.1, выпущенная 29 сентября 2015 г., содержала исправление для уязвимости системы безопасности (CVE-2015-7545), которая позволяла выполнять произвольный код. Уязвимость можно было использовать, если злоумышленник мог убедить жертву клонировать определенный URL-адрес, поскольку произвольные команды были встроены в сам URL-адрес. Злоумышленник может использовать эксплойт через атаку «человек посередине», если соединение не зашифровано, поскольку он может перенаправить пользователя на URL-адрес по своему выбору. Рекурсивные клоны также были уязвимы, поскольку позволяли контроллеру репозитория указывать произвольные URL-адреса через файл gitmodules.&lt;/p&gt;
&lt;p&gt;Git использует хэши SHA-1 внутри. Линус Торвальдс ответил, что хэш в основном предназначался для защиты от случайного повреждения, а безопасность, которую дает криптографически безопасный хеш, была просто случайным побочным эффектом, при этом основная безопасность заключалась в подписи в другом месте. После демонстрации атаки SHAttered на git в 2017 году git был изменен для использования варианта SHA-1, устойчивого к этой атаке. План перехода на хеш-функцию пишется с февраля 2020 года.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
